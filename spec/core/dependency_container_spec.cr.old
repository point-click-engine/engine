require "../spec_helper"
require "../../src/core/dependency_container"

# Mock interface for testing
module TestInterface
  abstract def test_method : String
end

# Mock implementation for testing
class TestImplementation
  include TestInterface

  def test_method : String
    "test_result"
  end
end

describe PointClickEngine::Core::DependencyContainer do
  describe "#initialize" do
    it "creates a new DependencyContainer instance" do
      container = PointClickEngine::Core::DependencyContainer.new
      container.should be_a(PointClickEngine::Core::DependencyContainer)
    end
  end

  describe "#register and #resolve" do
    it "registers and resolves dependencies" do
      container = PointClickEngine::Core::DependencyContainer.new
      impl = TestImplementation.new

      container.register(TestInterface, impl)
      resolved = container.resolve(TestInterface)

      # Just verify it works - object identity might not be preserved through Box
      resolved.test_method.should eq("test_result")
    end
  end

  describe "#register_singleton" do
    it "creates singletons from factories" do
      container = PointClickEngine::Core::DependencyContainer.new

      container.register_singleton(TestInterface, -> { TestImplementation.new })

      first = container.resolve(TestInterface)
      second = container.resolve(TestInterface)

      first.should eq(second) # Same instance
    end
  end

  describe "#registered?" do
    it "returns true for registered dependencies" do
      container = PointClickEngine::Core::DependencyContainer.new
      container.register(TestInterface, TestImplementation.new)

      container.registered?(TestInterface).should be_true
    end

    it "returns false for unregistered dependencies" do
      container = PointClickEngine::Core::DependencyContainer.new

      container.registered?(TestInterface).should be_false
    end
  end

  describe "#unregister" do
    it "removes registered dependencies" do
      container = PointClickEngine::Core::DependencyContainer.new
      container.register(TestInterface, TestImplementation.new)

      container.registered?(TestInterface).should be_true
      container.unregister(TestInterface)
      container.registered?(TestInterface).should be_false
    end
  end

  describe "#clear" do
    it "removes all registered dependencies" do
      container = PointClickEngine::Core::DependencyContainer.new
      container.register(TestInterface, TestImplementation.new)

      container.registered?(TestInterface).should be_true
      container.clear
      container.registered?(TestInterface).should be_false
    end
  end
end
